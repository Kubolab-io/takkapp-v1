/**
 * usePlanChats.js
 * 
 * Hook personalizado para manejar chats autom√°ticos de planes:
 * - Crear chat autom√°tico cuando se crea un plan
 * - Unirse autom√°ticamente al chat cuando se registra a un plan
 * - Obtener chat de un plan espec√≠fico
 */

import { db } from '@/firebaseconfig';
import {
    addDoc,
    arrayUnion,
    collection,
    doc,
    getDocs,
    query,
    serverTimestamp,
    updateDoc,
    where
} from 'firebase/firestore';

// Funci√≥n para generar ID √∫nico para grupos de planes
const generatePlanGroupId = () => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return `PLAN_${result}`;
};

// Funci√≥n para extraer la ciudad de una direcci√≥n
const extractCityFromAddress = (address) => {
  if (!address) return 'Sin ubicaci√≥n';
  
  // Lista de ciudades principales de Colombia para validaci√≥n
  const colombianCities = [
    'Bogot√°', 'Medell√≠n', 'Cali', 'Barranquilla', 'Cartagena', 'C√∫cuta', 
    'Bucaramanga', 'Pereira', 'Santa Marta', 'Ibagu√©', 'Pasto', 'Manizales',
    'Neiva', 'Villavicencio', 'Armenia', 'Valledupar', 'Monter√≠a', 'Sincelejo',
    'Popay√°n', 'Buenaventura', 'Tunja', 'Florencia', 'Riohacha', 'Quibd√≥',
    'Arauca', 'Yopal', 'Mocoa', 'Leticia', 'San Jos√© del Guaviare', 'In√≠rida',
    'Mit√∫', 'Puerto Carre√±o', 'Bogot√° D.C.', 'Bogota', 'Medellin', 'Cali',
    // Ciudades de Cundinamarca y √°rea metropolitana
    'Ch√≠a', 'Soacha', 'Zipaquir√°', 'Facatativ√°', 'Girardot', 'Madrid',
    'Mosquera', 'Sibat√©', 'Tabio', 'Tenjo', 'Cajic√°', 'Cota',
    // Otras ciudades importantes
    'Sabaneta', 'Itag√º√≠', 'Envigado', 'Bello', 'Copacabana', 'Gir√≥n',
    'Floridablanca', 'Piedecuesta', 'Soledad', 'Malambo', 'Sabanalarga'
  ];
  
  // Intentar extraer la ciudad de diferentes formatos de direcci√≥n
  const parts = address.split(',').map(part => part.trim());
  
  console.log('üîç Analizando partes de la direcci√≥n:', parts);
  
  // Buscar una ciudad conocida en las partes de la direcci√≥n
  // Empezar desde el final (donde suele estar la ciudad en Google Maps)
  for (let i = parts.length - 1; i >= 0; i--) {
    const part = parts[i];
    
    // Saltar si es "Colombia" o "CO"
    if (part.toLowerCase() === 'colombia' || part.toLowerCase() === 'co') {
      continue;
    }
    
    // Buscar coincidencia exacta
    const exactMatch = colombianCities.find(city => 
      part.toLowerCase() === city.toLowerCase()
    );
    if (exactMatch) {
      console.log('‚úÖ Coincidencia exacta encontrada:', exactMatch);
      return exactMatch;
    }
    
    // Buscar coincidencia parcial (para casos como "Bogot√° D.C.")
    const partialMatch = colombianCities.find(city => 
      part.toLowerCase().includes(city.toLowerCase()) || 
      city.toLowerCase().includes(part.toLowerCase())
    );
    if (partialMatch) {
      console.log('‚úÖ Coincidencia parcial encontrada:', partialMatch);
      return partialMatch;
    }
  }
  
  // Si no encuentra una ciudad conocida, intentar extraer del pen√∫ltimo elemento
  if (parts.length >= 2) {
    const cityPart = parts[parts.length - 2];
    // Si el pen√∫ltimo elemento parece una ciudad (no contiene n√∫meros)
    if (!/\d/.test(cityPart) && cityPart.length > 2) {
      return cityPart;
    }
  }
  
  // Si no se puede extraer, devolver 'Sin ubicaci√≥n'
  return 'Sin ubicaci√≥n';
};

export const usePlanChats = (user) => {
  
  // Crear chat autom√°tico para un plan
  const createPlanChat = async (planData) => {
    if (!user?.uid) {
      throw new Error('Usuario no autenticado');
    }

    try {
      console.log('üîó Creando chat autom√°tico para plan:', planData.title);
      
      const planGroupId = generatePlanGroupId();
      
      // Extraer ciudad de la direcci√≥n
      let extractedCity = 'Ciudad por confirmar';
      
      console.log('üèôÔ∏è Extrayendo ciudad de:', {
        location: planData.location,
        locationData: planData.locationData
      });
      
      // 1. Intentar con locationData.city si existe
      if (planData.locationData?.city && planData.locationData.city !== 'Ciudad por confirmar') {
        extractedCity = planData.locationData.city;
        console.log('‚úÖ Ciudad extra√≠da de locationData.city:', extractedCity);
      }
      // 2. Intentar extraer de la direcci√≥n completa
      else if (planData.location) {
        extractedCity = extractCityFromAddress(planData.location);
        console.log('‚úÖ Ciudad extra√≠da de location:', extractedCity);
      }
      // 3. Intentar con locationData.address si existe
      else if (planData.locationData?.address) {
        extractedCity = extractCityFromAddress(planData.locationData.address);
        console.log('‚úÖ Ciudad extra√≠da de locationData.address:', extractedCity);
      }
      
      console.log('üèôÔ∏è Ciudad final para el chat:', extractedCity);

      const planChatData = {
        groupId: planGroupId,
        name: planData.title,
        description: `Chat del plan: ${planData.title}`,
        location: planData.location || 'Ubicaci√≥n por confirmar',
        city: extractedCity,
        category: 'Plan',
        emoji: planData.activityType || 'üéØ',
        members: [user.uid],
        memberCount: 1,
        createdBy: user.uid,
        createdByDisplayName: user.displayName || user.email?.split('@')[0] || 'Usuario',
        createdAt: serverTimestamp(),
        isPublic: false, // Los chats de planes son privados
        isPlanChat: true, // Marcar como chat de plan
        planId: planData.id || null, // Referencia al plan original
        planData: {
          title: planData.title,
          description: planData.description,
          location: planData.location,
          date: planData.date,
          time: planData.time,
          price: planData.price,
          activityType: planData.activityType,
          maxParticipants: planData.maxParticipants
        }
      };

      const docRef = await addDoc(collection(db, 'groups'), planChatData);
      
      console.log('‚úÖ Chat de plan creado:', docRef.id);
      
      return { 
        docId: docRef.id, 
        groupId: planGroupId,
        chatId: docRef.id // Para compatibilidad con el sistema existente
      };
    } catch (error) {
      console.error('‚ùå Error creando chat de plan:', error);
      console.error('‚ùå Datos del plan:', planData);
      throw new Error(`No se pudo crear el chat del plan: ${error.message}`);
    }
  };

  // Obtener chat de un plan espec√≠fico
  const getPlanChat = async (planId) => {
    if (!user?.uid) {
      throw new Error('Usuario no autenticado');
    }

    try {
      console.log('üîç Buscando chat del plan:', planId);
      
      // Buscar grupos que sean chats de planes y tengan el planId
      const groupsRef = collection(db, 'groups');
      const q = query(
        groupsRef,
        where('isPlanChat', '==', true),
        where('planId', '==', planId)
      );
      
      const querySnapshot = await getDocs(q);
      
      if (!querySnapshot.empty) {
        const groupDoc = querySnapshot.docs[0];
        const groupData = { id: groupDoc.id, ...groupDoc.data() };
        
        console.log('‚úÖ Chat de plan encontrado:', groupData.id);
        return groupData;
      }
      
      console.log('‚ùå No se encontr√≥ chat para el plan:', planId);
      return null;
    } catch (error) {
      console.error('‚ùå Error obteniendo chat de plan:', error);
      return null;
    }
  };

  // Unirse al chat de un plan
  const joinPlanChat = async (planId) => {
    if (!user?.uid) {
      throw new Error('Usuario no autenticado');
    }

    try {
      console.log('üë• Uni√©ndose al chat del plan:', planId);
      
      // Buscar el chat del plan
      const planChat = await getPlanChat(planId);
      
      if (!planChat) {
        console.log('‚ùå No se encontr√≥ chat para el plan');
        return false;
      }

      // Verificar si ya es miembro
      if (planChat.members.includes(user.uid)) {
        console.log('‚ÑπÔ∏è Usuario ya es miembro del chat');
        return true;
      }

      // Agregar usuario al chat
      const groupRef = doc(db, 'groups', planChat.id);
      await updateDoc(groupRef, {
        members: arrayUnion(user.uid),
        memberCount: planChat.memberCount + 1
      });

      console.log('‚úÖ Usuario agregado al chat del plan');
      return true;
    } catch (error) {
      console.error('‚ùå Error uni√©ndose al chat del plan:', error);
      return false;
    }
  };

  // Salir del chat de un plan
  const leavePlanChat = async (planId) => {
    if (!user?.uid) {
      throw new Error('Usuario no autenticado');
    }

    try {
      console.log('üëã Saliendo del chat del plan:', planId);
      
      // Buscar el chat del plan
      const planChat = await getPlanChat(planId);
      
      if (!planChat) {
        console.log('‚ùå No se encontr√≥ chat para el plan');
        return false;
      }

      // Verificar si es miembro
      if (!planChat.members.includes(user.uid)) {
        console.log('‚ÑπÔ∏è Usuario no es miembro del chat');
        return true;
      }

      // Remover usuario del chat
      const updatedMembers = planChat.members.filter(memberId => memberId !== user.uid);
      const groupRef = doc(db, 'groups', planChat.id);
      
      await updateDoc(groupRef, {
        members: updatedMembers,
        memberCount: updatedMembers.length
      });

      console.log('‚úÖ Usuario removido del chat del plan');
      return true;
    } catch (error) {
      console.error('‚ùå Error saliendo del chat del plan:', error);
      return false;
    }
  };

  return {
    createPlanChat,
    getPlanChat,
    joinPlanChat,
    leavePlanChat
  };
};
